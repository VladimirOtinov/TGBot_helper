Metadata-Version: 2.1
Name: aioimaplib
Version: 1.0.1
Summary: Python asyncio IMAP4rev1 client library
Home-page: https://github.com/bamthomas/aioimaplib
Author: Bruno Thomas
Author-email: bruno@barreverte.fr
License: GPL-3.0
Keywords: asyncio mail imap
Platform: UNKNOWN
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Topic :: Communications :: Email :: Post-Office :: IMAP
Classifier: Topic :: Internet

About
=====
.. _imaplib2: https://sourceforge.net/projects/imaplib2/
.. _imaplib: https://docs.python.org/3/library/imaplib.html
.. _asyncio: https://docs.python.org/3/library/asyncio.html

.. image:: https://travis-ci.org/bamthomas/aioimaplib.png?branch=master
   :alt: Build status
   :target: https://travis-ci.com/bamthomas/aioimaplib

.. image:: https://coveralls.io/repos/github/bamthomas/aioimaplib/badge.svg
   :target: https://coveralls.io/github/bamthomas/aioimaplib


This library is inspired by imaplib_ and imaplib2_ from Piers Lauder, Nicolas Sebrecht, Sebastian Spaeth. Some utilities functions are taken from imaplib/imaplib2 thanks to them.

The aim is to port the imaplib with asyncio_, to benefit from the sleep or treat model.

It runs with python 3.6, 3.7, 3.8, 3.9.

Example
-------

.. code-block:: python

    import asyncio
    from aioimaplib import aioimaplib


    async def check_mailbox(host, user, password):
        imap_client = aioimaplib.IMAP4_SSL(host=host)
        await imap_client.wait_hello_from_server()

        await imap_client.login(user, password)

        res, data = await imap_client.select()
        print('there is %s messages INBOX' % data[0])

        await imap_client.logout()


    if __name__ == '__main__':
        loop = asyncio.get_event_loop()
        loop.run_until_complete(check_mailbox('my.imap.server', 'user', 'pass'))

**Beware** that the IMAP4.close() function is an IMAP function that is closing the selected mailbox, thus passing from SELECTED state to AUTH state. It **does not close** the TCP connection.
The way to close TCP connection properly is to logout.

IDLE command
------------
.. _RFC2177: https://tools.ietf.org/html/rfc2177

The RFC2177_ is implemented, to be able to wait for new mail messages without using CPU. The responses are pushed in an async queue, and it is possible to read them in real time. To leave the IDLE mode, it is necessary to send a "DONE" command to the server.

.. code-block:: python

    async def wait_for_new_message(host, user, password):
        imap_client = aioimaplib.IMAP4_SSL(host=host)
        await imap_client.wait_hello_from_server()

        await imap_client.login(user, password)
        await imap_client.select()

        idle = await imap_client.idle_start(timeout=10)
        while imap_client.has_pending_idle():
            msg = await imap_client.wait_server_push()
            print(msg)
            if msg == STOP_WAIT_SERVER_PUSH:
                imap_client.idle_done()
                await asyncio.wait_for(idle, 1)

        await imap_client.logout()

    if __name__ == '__main__':
            loop = asyncio.get_event_loop()
            loop.run_until_complete(wait_for_new_message('my.imap.server', 'user', 'pass'))

Or in a more event based style (the IDLE command is closed at each message from server):

.. code-block:: python

   async def idle_loop(host, user, password):
      imap_client = aioimaplib.IMAP4_SSL(host=host, timeout=30)
      await imap_client.wait_hello_from_server()

      await imap_client.login(user, password)
      await imap_client.select()

      while True:
         print((await imap_client.uid('fetch', '1:*', 'FLAGS')))

         idle = await imap_client.idle_start(timeout=60)
         print((await imap_client.wait_server_push()))

         imap_client.idle_done()
         await asyncio.wait_for(idle, 30)

Threading
---------
.. _asyncio.Event: https://docs.python.org/3.4/library/asyncio-sync.html#event
.. _asyncio.Condition: https://docs.python.org/3.4/library/asyncio-sync.html#condition
.. _supervisor: http://supervisord.org/

The IMAP4ClientProtocol class is not thread safe, it uses asyncio.Event_ and asyncio.Condition_ that are not thread safe, and state change for pending commands is not locked.

It is possible to use threads but each IMAP4ClientProtocol instance should run in the same thread:

.. image:: images/thread_imap_protocol.png

Each color rectangle is an IMAP4ClientProtocol instance piece of code executed by the thread asyncio loop until it reaches a yield, waiting on I/O.

For example, it is possible to launch 4 mono-threaded mail-fetcher processes on a 4 cores server with supervisor_, and use a distribution function like len(email) % (process_num) or whatever to share equally a mail account list between the 4 processes.

IMAP command concurrency
------------------------

IMAP protocol allows to run some commands in parallel. Four rules are implemented to ensure responses consistency:

1. if a sync command is running, the following requests (sync or async) must wait
2. if an async command is running, same async commands (or with the same untagged response type) must wait
3. async commands can be executed in parallel
4. sync command must wait pending async commands to finish

Logging
-------
.. _howto: https://docs.python.org/3.4/howto/logging.html#configuring-logging-for-a-library

As said in the logging howto_ the logger is defined with

.. code-block:: python

    logger = logging.getLogger(__name__)


Where name is 'aioimaplib.aioimaplib'. You can set the logger parameters, either by python API

.. code-block:: python

    aioimaplib_logger = logging.getLogger('aioimaplib.aioimaplib')
    sh = logging.StreamHandler()
    sh.setLevel(logging.DEBUG)
    sh.setFormatter(logging.Formatter("%(asctime)s %(levelname)s [%(module)s:%(lineno)d] %(message)s"))
    aioimaplib_logger.addHandler(sh)

Or loading config file (for example with logging.config.dictConfig(yaml.load(file))) with this piece of yaml file

.. code-block:: yaml

    loggers:
    ...
      aioimaplib.aioimaplib:
        level: DEBUG
        handlers: [syslog]
        propagate: no
    ...

Tested with
-----------

- dovecot 2.2.13 on debian Jessie
- gmail with imap and SSL
- outlook with SSL
- yahoo with SSL
- free.fr with SSL
- orange.fr with SSL
- mailden.net with SSL

Develop
=======

Developers are welcome! If you want to improve it, fix bugs, test it with other IMAP servers, give feedback, thank you for it.

To develop, just run

.. code-block:: bash

    virtualenv --python=python3.4 venv
    source venv/bin/activate
    python setup.py develop
    pip install -r dev-requirements.txt
    nosetests

To add an imaplib or imaplib2 command you can :

- add the function to the testing imapserver with a new imaplib or imaplib2 server test, i.e. test_imapserver_imaplib.py or test_imapserver_imaplib2.py respectively;
- then add the function to the aioimaplib doing almost the same test than above but the async way in test_aioimaplib.py.

Not unit tested
---------------
- PREAUTH

TODO
----
.. _rfc3501: https://tools.ietf.org/html/rfc3501
.. _rfc4978: https://tools.ietf.org/html/rfc4978
.. _rfc4314: https://tools.ietf.org/html/rfc4314
.. _rfc2087: https://tools.ietf.org/html/rfc2087
.. _rfc5256: https://tools.ietf.org/html/rfc5256
.. _rfc2971: https://tools.ietf.org/html/rfc2971
.. _rfc2342: https://tools.ietf.org/html/rfc2342
.. _rfc4469: https://tools.ietf.org/html/rfc4469

- 23/25 IMAP4rev1 commands are implemented from the main rfc3501_. 'STARTTLS' and 'AUTHENTICATE' are still missing.
- 'COMPRESS' from rfc4978_
- 'SETACL' 'DELETEACL' 'GETACL' 'MYRIGHTS' 'LISTRIGHTS' from ACL rfc4314_
- 'GETQUOTA': 'GETQUOTAROOT': 'SETQUOTA' from quota rfc2087_
- 'SORT' and 'THREAD' from the rfc5256_
- 'ID' from the rfc2971_
- 'NAMESPACE' from rfc2342_
- 'CATENATE' from rfc4469_
- tests with other servers

If it goes wrong
----------------
Sometimes you break things and you don't understand what's going on (I always do). For this library I have two related tools:

.. role:: bash(code)
   :language: bash

- ngrep on the imap test port: :bash:`sudo ngrep -d lo port 12345`
- activate debug logs changing INFO to DEBUG at the top of the mock server and the aioimaplib


Changes
=======


V1.0.0
------

After 5 years and 420 usages let's switch to 1.0.0.

- [aiolib] adds python 3.10 (but python 3.10 is failing on downloading interpretor)
- [aiolib] adds getquotaroot command

V0.9.0
------
Please note that this release changes the API : response lines are now all of bytes type (and not in string).

- [aiolib] compatible with python 3.9
- [aiolib] avoid having distinct types (str/bytes) in response lines

V0.8.0
-------
- [aiolib] adds type hints
- [aiolib] use async/await syntax (remove support for python 3.4)
- [aiolib] fixes issue #30 on idle race condition
- [aiolib] fixes the allowed version

V0.7.18
-------
- [aiolib] fix the fix python 3.7 don't use the 7.17


V0.7.17
-------
- [aiolib] fix loading issue when importing aioimaplib with python 3.7


V0.7.16
-------
merge from darkrain42

- [aiolib] fix interaction between idle loop and server keepalive
- [aiolib] fix cert verification on debian buster
- [test] fix imapserver literal handling on Python 3.6.5+
- [test] tests: Replace calls to asyncio.async with asyncio.ensure_future


V0.7.15
-------
- [aiolib] replace 'async' by is_async for python 3.7 cf #42
- [aiolib] Add ID command
- [aiolib] Add NAMESPACE command

V0.7.14
-------
- [fix] when there is ::1 as localhost in /etc/hosts in a docker container
- [test] tests with SSL
- [aiolib] quote password properly in IMAP dialog

V0.7.13
-------
- [aiolib] adds a connection lost callback
- [test] imapserver : added APPENDUID response for APPEND cmd
- [test][fix] imapserver append should add to the connected user mb
- [test] imapserver : more accurate building of message headers (using python email module)

V0.7.12
-------
- [aiolib] fix issue #24
- [aiolib] fix issue #27

V0.7.11
-------
- [aiolib] adds rfc6851 move

V0.7.10
-------
- [aiolib] adds IMAP4.has_capability function

V0.7.9
------
- [aiolib] adds uncomplete fetch command with uncomplete line
- [aiolib] adds uncomplete fetch command BODY without literal
- [aiolib] adds rfc4315 uidplus : expunge with uids
- [test] handles uidset better in imap server
- [test] refactor testing IMAP4ClientProtocol.data_received instead of _handle_responses

V0.7.8
------
- [aiolib] idle : added an idle_waiter for an event based idle loop

V0.7.7
------
- [aiolib] do not filter exists line for examine command
- [aiolib] idle : wait for the end of data frame before pushing into the queue
- [test] imapserver enhancements : accepts sequence sets/returns UID when fetch by uid

V0.7.6
------
- [aiolib] idle : added loop methods

V0.7.5
------
- [aiolib][fix] it's up to the user to send idle DONE

V0.7.4
------
- [aiolib] timeout for idle of 29 minutes + timeout of wait_server_push doesn't raise TimeoutException

V0.7.3
------
- [aiolib] added timeout for wait_server_push of 29 minutes
- [aiolib] Remove imap's Continuation from server when connection is idled. Provide imapserver.wait_state to wait for idle in tests
- [test][refactor] Replace WithIMapServer inheritance by mixin combinations between ClockTestCase/TestCase and WithIMapServer
- [test] Allow to send a html email
- [fix] handling untagged responses with noop async command


V0.7.2
------
- [fix] bug when incomplete literal occured before a tagged status line
- [tests] imapserver search with uid range
- [tests] better fetch request handling
- [log] Limit partials' log to 100 characters
- [build] Add tests' requires in setup.py

V0.7.1
------
- [refactor] adding incomplete line before calling _handle_responses

V0.7.0
------
- [fix] generalization of literal treatment
- do not filter exists line for 'select' command (breaks the API). To retrieve unread mails with select, use
   aioimaplib.extract_exists((yield from imap_client.select()) instead of 'yield from imap_client.select()[0]'

V0.6.2
------
- [fix] added '$' and ';' for fetch message with litteral regexp 

V0.6.1
------
- [fix] issue #17 "Error fetch uid param"

V0.6.0
------
- moved timeout handling at the Command level and not IMAP4 client for fetch as proposed by @cyberlis in https://github.com/bamthomas/aioimaplib/pull/16

V0.5.20
-------
- fix : issue #15 https://github.com/bamthomas/aioimaplib/issues/15 This will break the API for FETCH with emails BODY : now the first line is the server FETCH server response line. The messages are between 1 and end of Response.lines list.

V0.5.19
-------
- tests : [revert] add_charset to much intrusive when running a test suite 

V0.5.18
-------
- tests : body text was not base64 encoded even if the header said so

V0.5.17
-------
- tests : mail_from parameter from Mail.create should handle mail@host, <mail@host>, Name <mail@host>

V0.5.16
-------
- tests : added better encoding handling and message building in Mail.create 

V0.5.15
-------
- tests : added message_id as Mail.create parameter for testing 

V0.5.14
-------
- tests : extract Mail.create_binary for convenience

V0.5.13
-------
- fix : trailing whitespace bug causing "BAD Could not parse command" using gmail/IDLE
- fix : stop adding a space for the prefix 'UID ' -> 'UID'

V0.5.12
-------
- fix : issue #12 Not properly buffering newlines for incomplete lines
- fix : imapserver with status of an inexistant mailbox
- fix : remove offset problem with strip() modifying length of read data
- fix : remove 'unknown data received' logs if line is empty

V0.5.11
-------
- remove hard coded logging config
- doc : added logging settings

V0.5.10
-------
- added rfc5032 'within' function to server and tests for aiolib (it is only YOUNGER/OLDER arguments)

V0.5.9
------
-  pushing continuation in the queue when idled

V0.5.8
------
- added a stop waiting server push function to interupt yield from queue.get

V0.5.7
------
- server send still here every IDLE_STILL_HERE_PERIOD_SECONDS to client when idle
- fix when server was lauched with main, loop is already running

V0.5.6
------
- fix doc
- fix imapserver main (needs a asyncio.loop.run_forever())

V0.5.5
------
- fix issues with coroutines in uid command
- documentation
- remove PARTIAL, PROXYAUTH, SETANNOTATION and GETANNOTATION commands

V0.5.4
------
- refactor: treating response as we read the imap server responses for a better reading
- doc
- removing tests from package
- publish on pypi
- added coverall

V0.5.3
------
- fix aioimaplib bug when receiving chunked fetch data
- do not abort when receiving unsollicited data from server

V0.5.2
------
- build CI environment
- license GPL v3.0

V0.5.1
------
- added APPEND command
- fix usernames can have '@' for mockimapserver
- server can handle SEARCH with CHARSET opt parameter (but ignores it)

V0.5
----
- added 11 new imap commands
- added imap command synchronizing
- refactor
- documentation

V0.1
----
- init project with mockimapserver
- project files
- 11 imap commands


